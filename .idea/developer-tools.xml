<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeveloperToolsToolWindowSettingsV1" lastSelectedContentNodeId="text-statistic">
    <developerToolsConfigurations>
      <developerToolConfiguration developerToolId="text-statistic" id="9c8e4259-1add-4e2f-a84b-cbdf710f9f5d" name="Workbench">
        <properties>
          <property key="text" type="INPUT" value="kotlin.String|'use client';&#10;&#10;import React, { useState, useEffect } from 'react'; // 添加useEffect用于组件生命周期管理&#10;import { useRouter } from 'next/navigation'; // 用于页面导航&#10;import { login } from &quot;@/services/UserService&quot;; // 导入登录服务&#10;import { ResponseCode } from &quot;@/constant/ResponseCode&quot;; // 导入响应码常量&#10;import { showToast } from '@/components/common/Toast'; // 导入提示组件&#10;&#10;/**&#10; * 登录页面组件&#10; * 提供用户登录功能界面，包含用户名/邮箱和密码输入框&#10; */&#10;const LoginPage = () =&gt; {&#10;    // 使用Next.js路由&#10;    const router = useRouter();&#10;&#10;    // 表单数据状态&#10;    const [formData, setFormData] = useState({&#10;        username: '', // 用户名或邮箱&#10;        password: '', // 用户密码&#10;    });&#10;&#10;    // 错误信息状态&#10;    const [error, setError] = useState('');&#10;&#10;    // 表单提交状态&#10;    const [isSubmitting, setIsSubmitting] = useState(false);&#10;&#10;    // 检查用户是否已登录&#10;    useEffect(() =&gt; {&#10;        // 从localStorage检查是否已有token&#10;        const tokenValue = localStorage.getItem('tokenValue');&#10;        if (tokenValue) {&#10;            // 已登录则跳转到图表页面&#10;            router.push('/graph');&#10;        }&#10;    }, [router]); // 依赖于router&#10;&#10;    /**&#10;     * 处理输入框内容变化&#10;     * @param {React.ChangeEvent&lt;HTMLInputElement&gt;} e - 输入框事件对象&#10;     */&#10;    const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        const { name, value } = e.target;&#10;        // 更新表单数据&#10;        setFormData(prev =&gt; ({&#10;            ...prev,&#10;            [name]: value.trim() // 去除输入内容的首尾空格&#10;        }));&#10;        // 清除错误信息&#10;        setError('');&#10;    };&#10;    &#10;    const validateForm = () =&gt; {&#10;        // 验证用户名是否为空&#10;        if (!formData.username) {&#10;            setError('请输入用户名或邮箱');&#10;            return false;&#10;        }&#10;&#10;        // 验证密码是否为空&#10;        if (!formData.password) {&#10;            setError('请输入密码');&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    };&#10;&#10;    /**&#10;     * 处理表单提交&#10;     * @param {React.FormEvent} e - 表单提交事件对象&#10;     */&#10;    const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;        // 阻止表单默认提交行为&#10;        e.preventDefault();&#10;        // 清除错误信息&#10;        setError('');&#10;&#10;        // 如果已经在提交中，不再处理&#10;        if (isSubmitting) return;&#10;&#10;        // 验证表单&#10;        if (!validateForm()) return;&#10;&#10;        try {&#10;            // 设置提交状态&#10;            setIsSubmitting(true);&#10;&#10;            // 调用登录API&#10;            const response = await login(formData.username, formData.password);&#10;&#10;            // 根据响应码处理不同情况&#10;            if (response.code === ResponseCode.LOGIN_SUCCEED) {&#10;                // 登录成功，保存用户信息和token到localStorage&#10;                localStorage.setItem(&quot;username&quot;, formData.username);&#10;                if(response.data){&#10;                    localStorage.setItem('tokenName', response.data.tokenName);&#10;                    localStorage.setItem('tokenValue', response.data.tokenValue);&#10;                }&#10;                // 显示成功提示并跳转&#10;                showToast(&#10;                    response.message,&#10;                    3000,&#10;                    'success',&#10;                    () =&gt; router.push(&quot;/graph&quot;)&#10;                );&#10;            } else if (response.code === ResponseCode.LOGIN_ALREADY_DONE) {&#10;                // 用户已登录，显示提示并跳转&#10;                showToast(&#10;                    response.message,&#10;                    3000,&#10;                    'error',&#10;                    () =&gt; router.push(&quot;/graph&quot;)&#10;                );&#10;            } else {&#10;                // 其他错误情况，显示错误提示&#10;                showToast(&#10;                    response.message,&#10;                    3000,&#10;                    'error'&#10;                );&#10;                // 设置错误信息&#10;                setError(response.message || '登录失败，请稍后重试');&#10;            }&#10;        } catch (err) {&#10;            // 捕获并处理异常&#10;            console.error('登录过程中发生错误:', err);&#10;            setError('登录服务暂时不可用，请稍后重试');&#10;        } finally {&#10;            // 无论成功与否，重置提交状态&#10;            setIsSubmitting(false);&#10;        }&#10;    };&#10;&#10;    /**&#10;     * 处理导航按钮点击&#10;     * @param {string} path - 导航路径&#10;     */&#10;    const handleNavigate = (path: string) =&gt; {&#10;        router.push(path);&#10;    };&#10;&#10;    // 返回登录页面JSX结构&#10;    return (&#10;        &lt;div className=&quot;min-h-screen bg-gradient-to-b from-blue-50 via-white to-blue-50 flex items-center justify-center px-4&quot;&gt;&#10;            {/* 登录容器 */}&#10;            &lt;div className=&quot;max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-lg&quot;&gt;&#10;                {/* 标题区域 */}&#10;                &lt;div className=&quot;text-center&quot;&gt;&#10;                    &lt;h2 className=&quot;text-3xl font-bold text-blue-800 mb-2&quot;&gt;欢迎登录&lt;/h2&gt;&#10;                    &lt;p className=&quot;text-gray-600&quot;&gt;抑郁症专家知识系统&lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* 登录表单 */}&#10;                &lt;form className=&quot;mt-8 space-y-6&quot; onSubmit={handleSubmit} noValidate&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                        {/* 用户名/邮箱输入框 */}&#10;                        &lt;div&gt;&#10;                            &lt;label htmlFor=&quot;username&quot; className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                                用户名 / 邮箱&#10;                            &lt;/label&gt;&#10;                            &lt;input&#10;                                id=&quot;username&quot;&#10;                                name=&quot;username&quot;&#10;                                type=&quot;text&quot;&#10;                                autoComplete=&quot;username&quot;&#10;                                required&#10;                                value={formData.username}&#10;                                onChange={handleChange}&#10;                                className=&quot;appearance-none relative block w-full px-3 py-2 border border-gray-300&#10;                                 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none &#10;                                 focus:ring-2 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                                placeholder=&quot;请输入用户名或邮箱&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* 密码输入框 */}&#10;                        &lt;div&gt;&#10;                            &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                                密码&#10;                            &lt;/label&gt;&#10;                            &lt;input&#10;                                id=&quot;password&quot;&#10;                                name=&quot;password&quot;&#10;                                type=&quot;password&quot;&#10;                                autoComplete=&quot;current-password&quot;&#10;                                required&#10;                                value={formData.password}&#10;                                onChange={handleChange}&#10;                                className=&quot;appearance-none relative block w-full px-3 py-2 border border-gray-300&#10;                                 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none &#10;                                 focus:ring-2 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                                placeholder=&quot;请输入密码&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 错误信息显示 */}&#10;                    {error &amp;&amp; (&#10;                        &lt;div className=&quot;text-red-500 text-sm text-center&quot; role=&quot;alert&quot;&gt;&#10;                            {error}&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                    {/* 登录按钮 */}&#10;                    &lt;button&#10;                        type=&quot;submit&quot;&#10;                        disabled={isSubmitting}&#10;                        className={`group relative w-full flex justify-center py-2.5 px-4 border border-transparent&#10;                         text-sm font-medium rounded-lg text-white bg-blue-600 &#10;                         ${isSubmitting ? 'opacity-70 cursor-not-allowed' : 'hover:bg-blue-700 transform transition-all duration-150 hover:scale-[1.02]'}&#10;                         focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}&#10;                    &gt;&#10;                        {isSubmitting ? '登录中...' : '登录'}&#10;                    &lt;/button&gt;&#10;&#10;                    {/* 其他导航选项 */}&#10;                    &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                        {/* 返回首页按钮 */}&#10;                        &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; handleNavigate('/')}&#10;                            className=&quot;text-blue-600 hover:text-blue-800 font-medium&quot;&#10;                        &gt;&#10;                            返回首页&#10;                        &lt;/button&gt;&#10;&#10;                        {/* 忘记密码和注册账号按钮 */}&#10;                        &lt;div className=&quot;space-x-4&quot;&gt;&#10;                            &lt;button&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; handleNavigate('/forgot-password')}&#10;                                className=&quot;text-blue-600 hover:text-blue-800 font-medium&quot;&#10;                            &gt;&#10;                                忘记密码？&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; handleNavigate('/register')}&#10;                                className=&quot;text-blue-600 hover:text-blue-800 font-medium&quot;&#10;                            &gt;&#10;                                注册账号&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;// 导出登录页面组件&#10;export default LoginPage;" />
        </properties>
      </developerToolConfiguration>
    </developerToolsConfigurations>
  </component>
</project>